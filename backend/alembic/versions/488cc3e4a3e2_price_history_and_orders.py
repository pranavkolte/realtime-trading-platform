"""price_history and orders

Revision ID: 488cc3e4a3e2
Revises:
Create Date: 2025-08-18 07:34:34.581007

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "488cc3e4a3e2"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "price_history",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "user_type",
            sa.Enum("trader", "admin", name="usertypeenum"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "orders",
        sa.Column("order_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("side", sa.Enum("BUY", "SELL", name="side"), nullable=False),
        sa.Column(
            "order_type",
            sa.Enum("LIMIT", "MARKET", name="ordertype"),
            nullable=False,
        ),
        sa.Column("price", sa.Float(), nullable=True),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("remaining", sa.Float(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "OPEN",
                "PARTIALLY_FILLED",
                "FILLED",
                "CANCELED",
                name="orderstatus",
            ),
            nullable=False,
        ),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("order_id"),
    )
    op.create_table(
        "trades",
        sa.Column("trade_id", sa.UUID(), nullable=False),
        sa.Column("engine_trade_id", sa.Integer(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("buy_order_id", sa.UUID(), nullable=False),
        sa.Column("sell_order_id", sa.UUID(), nullable=False),
        sa.Column("buy_user_id", sa.UUID(), nullable=False),
        sa.Column("sell_user_id", sa.UUID(), nullable=False),
        sa.Column("ts", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["buy_order_id"],
            ["orders.order_id"],
        ),
        sa.ForeignKeyConstraint(
            ["buy_user_id"],
            ["users.user_id"],
        ),
        sa.ForeignKeyConstraint(
            ["sell_order_id"],
            ["orders.order_id"],
        ),
        sa.ForeignKeyConstraint(
            ["sell_user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("trade_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("trades")
    op.drop_table("orders")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("price_history")
    # ### end Alembic commands ###
